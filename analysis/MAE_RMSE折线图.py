import numpy as np
import matplotlib.pyplot as plt
import os
os.environ['KMP_DUPLICATE_LIB_OK']='TRUE'
# 假设这是你的数据数组
# 这里使用随机数据作为示例
# MAE = np.array([[1.1 , 1.04, 0.99, 0.49, 0.53, 0.48, 0.44, 0.39],
#        [1.11, 1.06, 1.08, 0.56, 0.68, 0.58, 0.55, 0.51],
#        [1.11, 1.08, 1.21, 0.62, 0.74, 0.64, 0.61, 0.58],
#        [1.1 , 1.11, 1.39, 0.66, 0.8 , 0.69, 0.66, 0.63],
#        [1.08, 1.15, 1.55, 0.7 , 0.84, 0.71, 0.7 , 0.67],
#        [1.04, 1.19, 1.68, 0.73, 0.88, 0.73, 0.73, 0.71],
#        [1.02, 1.22, 1.81, 0.75, 0.91, 0.75, 0.76, 0.74],
#        [1.22, 1.26, 1.94, 0.78, 0.94, 0.77, 0.79, 0.77],
#        [1.94, 1.3 , 2.06, 0.81, 0.97, 0.79, 0.81, 0.8 ],
#        [2.14, 1.34, 2.17, 0.83, 1.  , 0.79, 0.84, 0.83]])
MAE = np.array([[1.1,  0.62, 0.39, 0.39, 0.43],
 [1.09, 0.68, 0.5,  0.48, 0.52],
 [1.09, 0.73, 0.57, 0.56, 0.58],
 [1.1,  0.79, 0.61, 0.61, 0.62],
 [1.11, 0.83, 0.65, 0.64, 0.66],
 [1.12, 0.87, 0.68, 0.67, 0.69],
 [1.24, 0.91, 0.71, 0.7,  0.72],
 [1.41, 0.95, 0.74, 0.73, 0.74],
 [1.75, 0.99, 0.76, 0.75, 0.77],
 [2.87, 1.02, 0.78, 0.78, 0.79]])

RMSE = np.array([[1.37, 0.81, 0.55, 0.54, 0.59],
 [1.36, 0.89, 0.68, 0.67, 0.7 ],
 [1.37, 0.96, 0.77, 0.76, 0.78],
 [1.39, 1.03, 0.83, 0.82, 0.83],
 [1.4,  1.09, 0.87, 0.86, 0.88],
 [1.4,  1.14, 0.92, 0.9,  0.92],
 [1.54, 1.19, 0.95, 0.93, 0.95],
 [1.75, 1.24, 0.99, 0.97, 0.98],
 [2.12, 1.29, 1.02, 1. ,  1.02],
 [3.33, 1.33, 1.05, 1.03, 1.05]])

# RMSE = np.array([[1.41, 1.35, 0.81, 0.69],
#            [1.41, 1.88, 0.89, 0.84],
#            [1.41, 2.47, 0.96, 0.92],
#            [1.43, 2.93, 1.03, 0.98],
#            [1.48, 3.36, 1.09, 1.03],
#            [1.58, 3.79, 1.14, 1.07],
#            [1.64, 4.24, 1.19, 1.11],
#            [1.54, 4.71, 1.24, 1.14],
#            [1.49, 5.18, 1.29, 1.17],
#            [4.31, 5.62, 1.33, 1.19]])


R_2 = np.array([[0.976, 0.992, 0.996, 0.996, 0.996],
 [0.977, 0.99,  0.994, 0.994, 0.994],
 [0.977, 0.988, 0.993, 0.993, 0.992],
 [0.976, 0.987, 0.991, 0.992, 0.991],
 [0.976, 0.985, 0.99,  0.991, 0.99 ],
 [0.976, 0.984, 0.989, 0.99,  0.989],
 [0.97,  0.982, 0.989, 0.989, 0.989],
 [0.961, 0.981, 0.988, 0.988, 0.988],
 [0.942, 0.979, 0.987, 0.987, 0.987],
 [0.86,  0.978, 0.986, 0.987, 0.986]])

# R_2 = np.array([[0.975, 0.977, 0.992, 0.994],
#          [0.975, 0.956, 0.99,  0.991],
#          [0.975,  0.924, 0.988, 0.989],
#          [0.974, 0.892, 0.987, 0.988],
#          [0.972, 0.858, 0.985, 0.987],
#          [0.969, 0.82,  0.984, 0.986],
#          [0.966, 0.775, 0.982, 0.985],
#          [0.97, 0.722, 0.981, 0.984],
#          [0.972, 0.665, 0.979, 0.983],
#          [0.961, 0.606, 0.978, 0.982]])

# color = [(139/255, 0, 0), (0, 100/255, 0), (0, 0, 139/255), (128/255, 0, 128/255), (255/255, 140/255, 0), (139/255, 139/255, 0), (0, 0, 0)]
color = ['#1f77b4', '#ff7f0e', '#2ca02c', '#d62728', '#9467bd', '#8c564b', '#e377c2', '#7f7f7f']
# algos=['ConvLSTM', 'PredRNN', 'TCTN', 'MoDeRNN', 'PhyDNet', 'SimVP', 'ACFN', 'DSTFN']
algos=['ConvLSTM',  'SwinLSTM', 'ACFN', 'SE_ConvLSTM','SK_ConvLSTM']
# ['ConvLSTM','SwinLSTM','ACFN','SE_ConvLSTM','SK_ConvLSTM']
# marker = ['s', 'o', '^', 'p', 'x', '*', 'd']
marker = ['o', 's', '^', 'D', 'v', '<', '>', '*']
# 创建一个包含10个元素的列表，表示1~10天
days = list(range(1, 11))
# 绘制折线图
plt.figure(figsize=(10, 8), dpi=300)

# 逐个算法绘制折线
for i in range(RMSE.shape[1]):
       plt.plot(days, R_2[:, i], label=f'Algorithm {i + 1}', marker=marker[i], linewidth=2.5, color=color[i])

plt.yticks(fontsize=19, fontweight='bold', fontfamily='Times New Roman')
plt.xticks(fontsize=19, fontweight='bold', fontfamily='Times New Roman')
plt.xlabel('Prediction Horizon (day)',  fontdict={'family':'Times New Roman', 'size': 19, 'weight': 'bold'})
plt.ylabel('$R^2$',  fontdict={'family':'Times New Roman', 'size': 19, 'weight': 'bold'})
# plt.ylabel('MAE',  fontdict={'family':'Times New Roman', 'size': 19, 'weight': 'bold'})
# plt.ylabel('RMSE',  fontdict={'family':'Times New Roman', 'size': 19, 'weight': 'bold'})
plt.xticks(days)  # 设置横坐标刻度
plt.legend(algos, prop={'family' : 'Times New Roman', 'size': 14, 'weight': 'bold'})
plt.grid(True)  # 添加网格线
# 调整整个画布的布局

plt.savefig('../5个算法结果/20240525/R_2折线图.png', format='png', dpi=300, bbox_inches='tight', pad_inches=0.1)